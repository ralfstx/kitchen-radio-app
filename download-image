#!/usr/bin/env node
// See https://design.google.com/icons/

let fs = require('fs');
let path = require('path');
let https = require('https');
let AdmZip = require('adm-zip');

let factors = {
  mdpi: 1,
  hdpi: 1.5,
  xhdpi: 2,
  xxhdpi: 3,
  xxxhdpi: 4
};

let args = process.argv.slice(2);

if (!args.length) {
  console.error('Usage: download-image <name_color_dp>');
}

args.forEach(arg => {
  if (arg.endsWith('.zip')) {
    extractImages(arg);
  } else {
    downloadImages(arg);
  }
});

function downloadImages(name) {
  let file = `ic_${name}dp.zip`;
  console.log('download', file);
  let url = `https://storage.googleapis.com/material-icons/external-assets/v4/icons/zip/${file}`;
  https.get(url, (res) => {
    if (('' + res.statusCode).match(/^2\d\d$/)) {
      let stream = fs.createWriteStream(file);
      res.pipe(stream).on('finish', () => {
        extractImages(file);
      });
    } else {
      console.error(`HTTP Error ${res.statusCode}: ${res.statusMessage}`);
    }
  }).on('error', (err) => {
    console.error(err);
  });
}

function extractImages(file) {
  let zip = new AdmZip(file);
  zip.getEntries().forEach(entry => {
    let re = /\/drawable-(\S+)\/ic_(\S+)\.png/.exec(entry.entryName);
    if (re) {
      let factor = factors[re[1]];
      let name = re[2];
      let target = path.join('src/images', `${name}@${factor}x.png`);
      console.log('write', target);
      fs.writeFileSync(target, entry.getData());
    }
  });
}
